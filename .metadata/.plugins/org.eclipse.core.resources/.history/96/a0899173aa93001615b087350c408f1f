#include <iostream>
#include <sstream>
#include <vector>

using namespace std;

// Struct to represent state of water in the jugs.
struct State {
    int a, b, c;
    vector<string> directions;

    State(int _a, int _b, int _c) : a(_a), b(_b), c(_c) { }

    // String representation of state in tuple form.
    string to_string() {
        ostringstream oss;
        oss << "(" << a << ", " << b << ", " << c << ")";
        return oss.str();
    }
};

int argChecks(int argcount, char *args[]){
	if (argcount != 7){
		cerr << "Usage: ./waterjugpuzzle <cap A> <cap B> <cap C> <goal A> <goal B> <goal C>" << endl;
		return 1;
	}
	istringstream iss;
	int m;
	char jugs[3] = {'A', 'B', 'C'};
	for (int i = 1; i < argcount; i++){
		iss.str(args[i]);
		if(!(iss >> m)){ // arguments aren't integers
			if (i <=3){
				cerr << "Error: Invalid capacity '" << args[i] << "' for jug " << jugs[i-1] << "." << endl;
				return 1;
			} else {
				cerr << "Error: Invalid goal '" << args[i] << "' for jug " << jugs[i%4] << "." << endl;
				return 1;
			};
		} else { // arguments are integers, but bad user input
			if ((i < 4) && (args[i+3] > args[i])){
				cerr << "Error: Goal cannot exceed capacity of jug " << jugs[i] <<"." << endl;
				return 1;
			}
		}
		iss.clear();
	};
	int m = args[4]; int n = args[5]; int o = args[6]; int p = args[3];
	if (m + n + o != p){
		cerr << "Error: Total gallons in goal state must be equal to the capacity of jug C." << endl;
		return 1;
	};
	return 0;
}

int main(int argc, char *argv[]) {
/*
	State s(0, 0, 8);
    cout << s.to_string() << endl;
    s.a += 3;
    s.c -= 3;
    cout << s.to_string() << endl;
    return 0;
*/
	argChecks(argc, argv);
}
